// Code generated by counterfeiter. DO NOT EDIT.
package stackfakes

import (
	"sync"

	"github.com/paketo-buildpacks/stacks/create-stack/pkg/stack"
)

type FakeStack struct {
	GetBaseBuildDockerfilePathStub        func() string
	getBaseBuildDockerfilePathMutex       sync.RWMutex
	getBaseBuildDockerfilePathArgsForCall []struct {
	}
	getBaseBuildDockerfilePathReturns struct {
		result1 string
	}
	getBaseBuildDockerfilePathReturnsOnCall map[int]struct {
		result1 string
	}
	GetBaseRunDockerfilePathStub        func() string
	getBaseRunDockerfilePathMutex       sync.RWMutex
	getBaseRunDockerfilePathArgsForCall []struct {
	}
	getBaseRunDockerfilePathReturns struct {
		result1 string
	}
	getBaseRunDockerfilePathReturnsOnCall map[int]struct {
		result1 string
	}
	GetBuildDescriptionStub        func() string
	getBuildDescriptionMutex       sync.RWMutex
	getBuildDescriptionArgsForCall []struct {
	}
	getBuildDescriptionReturns struct {
		result1 string
	}
	getBuildDescriptionReturnsOnCall map[int]struct {
		result1 string
	}
	GetBuildPackagesStub        func() string
	getBuildPackagesMutex       sync.RWMutex
	getBuildPackagesArgsForCall []struct {
	}
	getBuildPackagesReturns struct {
		result1 string
	}
	getBuildPackagesReturnsOnCall map[int]struct {
		result1 string
	}
	GetCNBBuildDockerfilePathStub        func() string
	getCNBBuildDockerfilePathMutex       sync.RWMutex
	getCNBBuildDockerfilePathArgsForCall []struct {
	}
	getCNBBuildDockerfilePathReturns struct {
		result1 string
	}
	getCNBBuildDockerfilePathReturnsOnCall map[int]struct {
		result1 string
	}
	GetCNBRunDockerfilePathStub        func() string
	getCNBRunDockerfilePathMutex       sync.RWMutex
	getCNBRunDockerfilePathArgsForCall []struct {
	}
	getCNBRunDockerfilePathReturns struct {
		result1 string
	}
	getCNBRunDockerfilePathReturnsOnCall map[int]struct {
		result1 string
	}
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct {
	}
	getNameReturns struct {
		result1 string
	}
	getNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetRunDescriptionStub        func() string
	getRunDescriptionMutex       sync.RWMutex
	getRunDescriptionArgsForCall []struct {
	}
	getRunDescriptionReturns struct {
		result1 string
	}
	getRunDescriptionReturnsOnCall map[int]struct {
		result1 string
	}
	GetRunPackagesStub        func() string
	getRunPackagesMutex       sync.RWMutex
	getRunPackagesArgsForCall []struct {
	}
	getRunPackagesReturns struct {
		result1 string
	}
	getRunPackagesReturnsOnCall map[int]struct {
		result1 string
	}
	GetSourcesStub        func() string
	getSourcesMutex       sync.RWMutex
	getSourcesArgsForCall []struct {
	}
	getSourcesReturns struct {
		result1 string
	}
	getSourcesReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStack) GetBaseBuildDockerfilePath() string {
	fake.getBaseBuildDockerfilePathMutex.Lock()
	ret, specificReturn := fake.getBaseBuildDockerfilePathReturnsOnCall[len(fake.getBaseBuildDockerfilePathArgsForCall)]
	fake.getBaseBuildDockerfilePathArgsForCall = append(fake.getBaseBuildDockerfilePathArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBaseBuildDockerfilePath", []interface{}{})
	fake.getBaseBuildDockerfilePathMutex.Unlock()
	if fake.GetBaseBuildDockerfilePathStub != nil {
		return fake.GetBaseBuildDockerfilePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBaseBuildDockerfilePathReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetBaseBuildDockerfilePathCallCount() int {
	fake.getBaseBuildDockerfilePathMutex.RLock()
	defer fake.getBaseBuildDockerfilePathMutex.RUnlock()
	return len(fake.getBaseBuildDockerfilePathArgsForCall)
}

func (fake *FakeStack) GetBaseBuildDockerfilePathCalls(stub func() string) {
	fake.getBaseBuildDockerfilePathMutex.Lock()
	defer fake.getBaseBuildDockerfilePathMutex.Unlock()
	fake.GetBaseBuildDockerfilePathStub = stub
}

func (fake *FakeStack) GetBaseBuildDockerfilePathReturns(result1 string) {
	fake.getBaseBuildDockerfilePathMutex.Lock()
	defer fake.getBaseBuildDockerfilePathMutex.Unlock()
	fake.GetBaseBuildDockerfilePathStub = nil
	fake.getBaseBuildDockerfilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBaseBuildDockerfilePathReturnsOnCall(i int, result1 string) {
	fake.getBaseBuildDockerfilePathMutex.Lock()
	defer fake.getBaseBuildDockerfilePathMutex.Unlock()
	fake.GetBaseBuildDockerfilePathStub = nil
	if fake.getBaseBuildDockerfilePathReturnsOnCall == nil {
		fake.getBaseBuildDockerfilePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBaseBuildDockerfilePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBaseRunDockerfilePath() string {
	fake.getBaseRunDockerfilePathMutex.Lock()
	ret, specificReturn := fake.getBaseRunDockerfilePathReturnsOnCall[len(fake.getBaseRunDockerfilePathArgsForCall)]
	fake.getBaseRunDockerfilePathArgsForCall = append(fake.getBaseRunDockerfilePathArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBaseRunDockerfilePath", []interface{}{})
	fake.getBaseRunDockerfilePathMutex.Unlock()
	if fake.GetBaseRunDockerfilePathStub != nil {
		return fake.GetBaseRunDockerfilePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBaseRunDockerfilePathReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetBaseRunDockerfilePathCallCount() int {
	fake.getBaseRunDockerfilePathMutex.RLock()
	defer fake.getBaseRunDockerfilePathMutex.RUnlock()
	return len(fake.getBaseRunDockerfilePathArgsForCall)
}

func (fake *FakeStack) GetBaseRunDockerfilePathCalls(stub func() string) {
	fake.getBaseRunDockerfilePathMutex.Lock()
	defer fake.getBaseRunDockerfilePathMutex.Unlock()
	fake.GetBaseRunDockerfilePathStub = stub
}

func (fake *FakeStack) GetBaseRunDockerfilePathReturns(result1 string) {
	fake.getBaseRunDockerfilePathMutex.Lock()
	defer fake.getBaseRunDockerfilePathMutex.Unlock()
	fake.GetBaseRunDockerfilePathStub = nil
	fake.getBaseRunDockerfilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBaseRunDockerfilePathReturnsOnCall(i int, result1 string) {
	fake.getBaseRunDockerfilePathMutex.Lock()
	defer fake.getBaseRunDockerfilePathMutex.Unlock()
	fake.GetBaseRunDockerfilePathStub = nil
	if fake.getBaseRunDockerfilePathReturnsOnCall == nil {
		fake.getBaseRunDockerfilePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBaseRunDockerfilePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBuildDescription() string {
	fake.getBuildDescriptionMutex.Lock()
	ret, specificReturn := fake.getBuildDescriptionReturnsOnCall[len(fake.getBuildDescriptionArgsForCall)]
	fake.getBuildDescriptionArgsForCall = append(fake.getBuildDescriptionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBuildDescription", []interface{}{})
	fake.getBuildDescriptionMutex.Unlock()
	if fake.GetBuildDescriptionStub != nil {
		return fake.GetBuildDescriptionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBuildDescriptionReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetBuildDescriptionCallCount() int {
	fake.getBuildDescriptionMutex.RLock()
	defer fake.getBuildDescriptionMutex.RUnlock()
	return len(fake.getBuildDescriptionArgsForCall)
}

func (fake *FakeStack) GetBuildDescriptionCalls(stub func() string) {
	fake.getBuildDescriptionMutex.Lock()
	defer fake.getBuildDescriptionMutex.Unlock()
	fake.GetBuildDescriptionStub = stub
}

func (fake *FakeStack) GetBuildDescriptionReturns(result1 string) {
	fake.getBuildDescriptionMutex.Lock()
	defer fake.getBuildDescriptionMutex.Unlock()
	fake.GetBuildDescriptionStub = nil
	fake.getBuildDescriptionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBuildDescriptionReturnsOnCall(i int, result1 string) {
	fake.getBuildDescriptionMutex.Lock()
	defer fake.getBuildDescriptionMutex.Unlock()
	fake.GetBuildDescriptionStub = nil
	if fake.getBuildDescriptionReturnsOnCall == nil {
		fake.getBuildDescriptionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBuildDescriptionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBuildPackages() string {
	fake.getBuildPackagesMutex.Lock()
	ret, specificReturn := fake.getBuildPackagesReturnsOnCall[len(fake.getBuildPackagesArgsForCall)]
	fake.getBuildPackagesArgsForCall = append(fake.getBuildPackagesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetBuildPackages", []interface{}{})
	fake.getBuildPackagesMutex.Unlock()
	if fake.GetBuildPackagesStub != nil {
		return fake.GetBuildPackagesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getBuildPackagesReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetBuildPackagesCallCount() int {
	fake.getBuildPackagesMutex.RLock()
	defer fake.getBuildPackagesMutex.RUnlock()
	return len(fake.getBuildPackagesArgsForCall)
}

func (fake *FakeStack) GetBuildPackagesCalls(stub func() string) {
	fake.getBuildPackagesMutex.Lock()
	defer fake.getBuildPackagesMutex.Unlock()
	fake.GetBuildPackagesStub = stub
}

func (fake *FakeStack) GetBuildPackagesReturns(result1 string) {
	fake.getBuildPackagesMutex.Lock()
	defer fake.getBuildPackagesMutex.Unlock()
	fake.GetBuildPackagesStub = nil
	fake.getBuildPackagesReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetBuildPackagesReturnsOnCall(i int, result1 string) {
	fake.getBuildPackagesMutex.Lock()
	defer fake.getBuildPackagesMutex.Unlock()
	fake.GetBuildPackagesStub = nil
	if fake.getBuildPackagesReturnsOnCall == nil {
		fake.getBuildPackagesReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBuildPackagesReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetCNBBuildDockerfilePath() string {
	fake.getCNBBuildDockerfilePathMutex.Lock()
	ret, specificReturn := fake.getCNBBuildDockerfilePathReturnsOnCall[len(fake.getCNBBuildDockerfilePathArgsForCall)]
	fake.getCNBBuildDockerfilePathArgsForCall = append(fake.getCNBBuildDockerfilePathArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCNBBuildDockerfilePath", []interface{}{})
	fake.getCNBBuildDockerfilePathMutex.Unlock()
	if fake.GetCNBBuildDockerfilePathStub != nil {
		return fake.GetCNBBuildDockerfilePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCNBBuildDockerfilePathReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetCNBBuildDockerfilePathCallCount() int {
	fake.getCNBBuildDockerfilePathMutex.RLock()
	defer fake.getCNBBuildDockerfilePathMutex.RUnlock()
	return len(fake.getCNBBuildDockerfilePathArgsForCall)
}

func (fake *FakeStack) GetCNBBuildDockerfilePathCalls(stub func() string) {
	fake.getCNBBuildDockerfilePathMutex.Lock()
	defer fake.getCNBBuildDockerfilePathMutex.Unlock()
	fake.GetCNBBuildDockerfilePathStub = stub
}

func (fake *FakeStack) GetCNBBuildDockerfilePathReturns(result1 string) {
	fake.getCNBBuildDockerfilePathMutex.Lock()
	defer fake.getCNBBuildDockerfilePathMutex.Unlock()
	fake.GetCNBBuildDockerfilePathStub = nil
	fake.getCNBBuildDockerfilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetCNBBuildDockerfilePathReturnsOnCall(i int, result1 string) {
	fake.getCNBBuildDockerfilePathMutex.Lock()
	defer fake.getCNBBuildDockerfilePathMutex.Unlock()
	fake.GetCNBBuildDockerfilePathStub = nil
	if fake.getCNBBuildDockerfilePathReturnsOnCall == nil {
		fake.getCNBBuildDockerfilePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCNBBuildDockerfilePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetCNBRunDockerfilePath() string {
	fake.getCNBRunDockerfilePathMutex.Lock()
	ret, specificReturn := fake.getCNBRunDockerfilePathReturnsOnCall[len(fake.getCNBRunDockerfilePathArgsForCall)]
	fake.getCNBRunDockerfilePathArgsForCall = append(fake.getCNBRunDockerfilePathArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCNBRunDockerfilePath", []interface{}{})
	fake.getCNBRunDockerfilePathMutex.Unlock()
	if fake.GetCNBRunDockerfilePathStub != nil {
		return fake.GetCNBRunDockerfilePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCNBRunDockerfilePathReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetCNBRunDockerfilePathCallCount() int {
	fake.getCNBRunDockerfilePathMutex.RLock()
	defer fake.getCNBRunDockerfilePathMutex.RUnlock()
	return len(fake.getCNBRunDockerfilePathArgsForCall)
}

func (fake *FakeStack) GetCNBRunDockerfilePathCalls(stub func() string) {
	fake.getCNBRunDockerfilePathMutex.Lock()
	defer fake.getCNBRunDockerfilePathMutex.Unlock()
	fake.GetCNBRunDockerfilePathStub = stub
}

func (fake *FakeStack) GetCNBRunDockerfilePathReturns(result1 string) {
	fake.getCNBRunDockerfilePathMutex.Lock()
	defer fake.getCNBRunDockerfilePathMutex.Unlock()
	fake.GetCNBRunDockerfilePathStub = nil
	fake.getCNBRunDockerfilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetCNBRunDockerfilePathReturnsOnCall(i int, result1 string) {
	fake.getCNBRunDockerfilePathMutex.Lock()
	defer fake.getCNBRunDockerfilePathMutex.Unlock()
	fake.GetCNBRunDockerfilePathStub = nil
	if fake.getCNBRunDockerfilePathReturnsOnCall == nil {
		fake.getCNBRunDockerfilePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCNBRunDockerfilePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetName() string {
	fake.getNameMutex.Lock()
	ret, specificReturn := fake.getNameReturnsOnCall[len(fake.getNameArgsForCall)]
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct {
	}{})
	fake.recordInvocation("GetName", []interface{}{})
	fake.getNameMutex.Unlock()
	if fake.GetNameStub != nil {
		return fake.GetNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getNameReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeStack) GetNameCalls(stub func() string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = stub
}

func (fake *FakeStack) GetNameReturns(result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetNameReturnsOnCall(i int, result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	if fake.getNameReturnsOnCall == nil {
		fake.getNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetRunDescription() string {
	fake.getRunDescriptionMutex.Lock()
	ret, specificReturn := fake.getRunDescriptionReturnsOnCall[len(fake.getRunDescriptionArgsForCall)]
	fake.getRunDescriptionArgsForCall = append(fake.getRunDescriptionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetRunDescription", []interface{}{})
	fake.getRunDescriptionMutex.Unlock()
	if fake.GetRunDescriptionStub != nil {
		return fake.GetRunDescriptionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getRunDescriptionReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetRunDescriptionCallCount() int {
	fake.getRunDescriptionMutex.RLock()
	defer fake.getRunDescriptionMutex.RUnlock()
	return len(fake.getRunDescriptionArgsForCall)
}

func (fake *FakeStack) GetRunDescriptionCalls(stub func() string) {
	fake.getRunDescriptionMutex.Lock()
	defer fake.getRunDescriptionMutex.Unlock()
	fake.GetRunDescriptionStub = stub
}

func (fake *FakeStack) GetRunDescriptionReturns(result1 string) {
	fake.getRunDescriptionMutex.Lock()
	defer fake.getRunDescriptionMutex.Unlock()
	fake.GetRunDescriptionStub = nil
	fake.getRunDescriptionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetRunDescriptionReturnsOnCall(i int, result1 string) {
	fake.getRunDescriptionMutex.Lock()
	defer fake.getRunDescriptionMutex.Unlock()
	fake.GetRunDescriptionStub = nil
	if fake.getRunDescriptionReturnsOnCall == nil {
		fake.getRunDescriptionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRunDescriptionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetRunPackages() string {
	fake.getRunPackagesMutex.Lock()
	ret, specificReturn := fake.getRunPackagesReturnsOnCall[len(fake.getRunPackagesArgsForCall)]
	fake.getRunPackagesArgsForCall = append(fake.getRunPackagesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetRunPackages", []interface{}{})
	fake.getRunPackagesMutex.Unlock()
	if fake.GetRunPackagesStub != nil {
		return fake.GetRunPackagesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getRunPackagesReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetRunPackagesCallCount() int {
	fake.getRunPackagesMutex.RLock()
	defer fake.getRunPackagesMutex.RUnlock()
	return len(fake.getRunPackagesArgsForCall)
}

func (fake *FakeStack) GetRunPackagesCalls(stub func() string) {
	fake.getRunPackagesMutex.Lock()
	defer fake.getRunPackagesMutex.Unlock()
	fake.GetRunPackagesStub = stub
}

func (fake *FakeStack) GetRunPackagesReturns(result1 string) {
	fake.getRunPackagesMutex.Lock()
	defer fake.getRunPackagesMutex.Unlock()
	fake.GetRunPackagesStub = nil
	fake.getRunPackagesReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetRunPackagesReturnsOnCall(i int, result1 string) {
	fake.getRunPackagesMutex.Lock()
	defer fake.getRunPackagesMutex.Unlock()
	fake.GetRunPackagesStub = nil
	if fake.getRunPackagesReturnsOnCall == nil {
		fake.getRunPackagesReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRunPackagesReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetSources() string {
	fake.getSourcesMutex.Lock()
	ret, specificReturn := fake.getSourcesReturnsOnCall[len(fake.getSourcesArgsForCall)]
	fake.getSourcesArgsForCall = append(fake.getSourcesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSources", []interface{}{})
	fake.getSourcesMutex.Unlock()
	if fake.GetSourcesStub != nil {
		return fake.GetSourcesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getSourcesReturns
	return fakeReturns.result1
}

func (fake *FakeStack) GetSourcesCallCount() int {
	fake.getSourcesMutex.RLock()
	defer fake.getSourcesMutex.RUnlock()
	return len(fake.getSourcesArgsForCall)
}

func (fake *FakeStack) GetSourcesCalls(stub func() string) {
	fake.getSourcesMutex.Lock()
	defer fake.getSourcesMutex.Unlock()
	fake.GetSourcesStub = stub
}

func (fake *FakeStack) GetSourcesReturns(result1 string) {
	fake.getSourcesMutex.Lock()
	defer fake.getSourcesMutex.Unlock()
	fake.GetSourcesStub = nil
	fake.getSourcesReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) GetSourcesReturnsOnCall(i int, result1 string) {
	fake.getSourcesMutex.Lock()
	defer fake.getSourcesMutex.Unlock()
	fake.GetSourcesStub = nil
	if fake.getSourcesReturnsOnCall == nil {
		fake.getSourcesReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getSourcesReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStack) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBaseBuildDockerfilePathMutex.RLock()
	defer fake.getBaseBuildDockerfilePathMutex.RUnlock()
	fake.getBaseRunDockerfilePathMutex.RLock()
	defer fake.getBaseRunDockerfilePathMutex.RUnlock()
	fake.getBuildDescriptionMutex.RLock()
	defer fake.getBuildDescriptionMutex.RUnlock()
	fake.getBuildPackagesMutex.RLock()
	defer fake.getBuildPackagesMutex.RUnlock()
	fake.getCNBBuildDockerfilePathMutex.RLock()
	defer fake.getCNBBuildDockerfilePathMutex.RUnlock()
	fake.getCNBRunDockerfilePathMutex.RLock()
	defer fake.getCNBRunDockerfilePathMutex.RUnlock()
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	fake.getRunDescriptionMutex.RLock()
	defer fake.getRunDescriptionMutex.RUnlock()
	fake.getRunPackagesMutex.RLock()
	defer fake.getRunPackagesMutex.RUnlock()
	fake.getSourcesMutex.RLock()
	defer fake.getSourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStack) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stack.Stack = new(FakeStack)
