// Code generated by counterfeiter. DO NOT EDIT.
package stackfakes

import (
	"sync"

	"github.com/google/go-containerregistry/pkg/authn"
	v1 "github.com/google/go-containerregistry/pkg/v1"
	"github.com/paketo-buildpacks/stacks/create-stack/pkg/stack"
)

type FakeImageClient struct {
	BuildStub        func(string, string, ...string) error
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	buildReturns struct {
		result1 error
	}
	buildReturnsOnCall map[int]struct {
		result1 error
	}
	PullStub        func(string, authn.Keychain) (v1.Image, error)
	pullMutex       sync.RWMutex
	pullArgsForCall []struct {
		arg1 string
		arg2 authn.Keychain
	}
	pullReturns struct {
		result1 v1.Image
		result2 error
	}
	pullReturnsOnCall map[int]struct {
		result1 v1.Image
		result2 error
	}
	PushStub        func(string) (string, error)
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 string
	}
	pushReturns struct {
		result1 string
		result2 error
	}
	pushReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SetLabelStub        func(string, string, string) error
	setLabelMutex       sync.RWMutex
	setLabelArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	setLabelReturns struct {
		result1 error
	}
	setLabelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageClient) Build(arg1 string, arg2 string, arg3 ...string) error {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Build", []interface{}{arg1, arg2, arg3})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.buildReturns
	return fakeReturns.result1
}

func (fake *FakeImageClient) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeImageClient) BuildCalls(stub func(string, string, ...string) error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeImageClient) BuildArgsForCall(i int) (string, string, []string) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImageClient) BuildReturns(result1 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageClient) BuildReturnsOnCall(i int, result1 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageClient) Pull(arg1 string, arg2 authn.Keychain) (v1.Image, error) {
	fake.pullMutex.Lock()
	ret, specificReturn := fake.pullReturnsOnCall[len(fake.pullArgsForCall)]
	fake.pullArgsForCall = append(fake.pullArgsForCall, struct {
		arg1 string
		arg2 authn.Keychain
	}{arg1, arg2})
	fake.recordInvocation("Pull", []interface{}{arg1, arg2})
	fake.pullMutex.Unlock()
	if fake.PullStub != nil {
		return fake.PullStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pullReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageClient) PullCallCount() int {
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	return len(fake.pullArgsForCall)
}

func (fake *FakeImageClient) PullCalls(stub func(string, authn.Keychain) (v1.Image, error)) {
	fake.pullMutex.Lock()
	defer fake.pullMutex.Unlock()
	fake.PullStub = stub
}

func (fake *FakeImageClient) PullArgsForCall(i int) (string, authn.Keychain) {
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	argsForCall := fake.pullArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageClient) PullReturns(result1 v1.Image, result2 error) {
	fake.pullMutex.Lock()
	defer fake.pullMutex.Unlock()
	fake.PullStub = nil
	fake.pullReturns = struct {
		result1 v1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageClient) PullReturnsOnCall(i int, result1 v1.Image, result2 error) {
	fake.pullMutex.Lock()
	defer fake.pullMutex.Unlock()
	fake.PullStub = nil
	if fake.pullReturnsOnCall == nil {
		fake.pullReturnsOnCall = make(map[int]struct {
			result1 v1.Image
			result2 error
		})
	}
	fake.pullReturnsOnCall[i] = struct {
		result1 v1.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageClient) Push(arg1 string) (string, error) {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Push", []interface{}{arg1})
	fake.pushMutex.Unlock()
	if fake.PushStub != nil {
		return fake.PushStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.pushReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageClient) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeImageClient) PushCalls(stub func(string) (string, error)) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeImageClient) PushArgsForCall(i int) string {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageClient) PushReturns(result1 string, result2 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageClient) PushReturnsOnCall(i int, result1 string, result2 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageClient) SetLabel(arg1 string, arg2 string, arg3 string) error {
	fake.setLabelMutex.Lock()
	ret, specificReturn := fake.setLabelReturnsOnCall[len(fake.setLabelArgsForCall)]
	fake.setLabelArgsForCall = append(fake.setLabelArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetLabel", []interface{}{arg1, arg2, arg3})
	fake.setLabelMutex.Unlock()
	if fake.SetLabelStub != nil {
		return fake.SetLabelStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setLabelReturns
	return fakeReturns.result1
}

func (fake *FakeImageClient) SetLabelCallCount() int {
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	return len(fake.setLabelArgsForCall)
}

func (fake *FakeImageClient) SetLabelCalls(stub func(string, string, string) error) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = stub
}

func (fake *FakeImageClient) SetLabelArgsForCall(i int) (string, string, string) {
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	argsForCall := fake.setLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImageClient) SetLabelReturns(result1 error) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = nil
	fake.setLabelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageClient) SetLabelReturnsOnCall(i int, result1 error) {
	fake.setLabelMutex.Lock()
	defer fake.setLabelMutex.Unlock()
	fake.SetLabelStub = nil
	if fake.setLabelReturnsOnCall == nil {
		fake.setLabelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setLabelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.pullMutex.RLock()
	defer fake.pullMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.setLabelMutex.RLock()
	defer fake.setLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stack.ImageClient = new(FakeImageClient)
