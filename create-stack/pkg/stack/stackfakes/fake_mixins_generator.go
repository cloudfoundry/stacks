// Code generated by counterfeiter. DO NOT EDIT.
package stackfakes

import (
	"sync"

	"github.com/paketo-buildpacks/stacks/create-stack/pkg/stack"
)

type FakeMixinsGenerator struct {
	GetMixinsStub        func([]string, []string) ([]string, []string)
	getMixinsMutex       sync.RWMutex
	getMixinsArgsForCall []struct {
		arg1 []string
		arg2 []string
	}
	getMixinsReturns struct {
		result1 []string
		result2 []string
	}
	getMixinsReturnsOnCall map[int]struct {
		result1 []string
		result2 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMixinsGenerator) GetMixins(arg1 []string, arg2 []string) ([]string, []string) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getMixinsMutex.Lock()
	ret, specificReturn := fake.getMixinsReturnsOnCall[len(fake.getMixinsArgsForCall)]
	fake.getMixinsArgsForCall = append(fake.getMixinsArgsForCall, struct {
		arg1 []string
		arg2 []string
	}{arg1Copy, arg2Copy})
	fake.recordInvocation("GetMixins", []interface{}{arg1Copy, arg2Copy})
	fake.getMixinsMutex.Unlock()
	if fake.GetMixinsStub != nil {
		return fake.GetMixinsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMixinsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMixinsGenerator) GetMixinsCallCount() int {
	fake.getMixinsMutex.RLock()
	defer fake.getMixinsMutex.RUnlock()
	return len(fake.getMixinsArgsForCall)
}

func (fake *FakeMixinsGenerator) GetMixinsCalls(stub func([]string, []string) ([]string, []string)) {
	fake.getMixinsMutex.Lock()
	defer fake.getMixinsMutex.Unlock()
	fake.GetMixinsStub = stub
}

func (fake *FakeMixinsGenerator) GetMixinsArgsForCall(i int) ([]string, []string) {
	fake.getMixinsMutex.RLock()
	defer fake.getMixinsMutex.RUnlock()
	argsForCall := fake.getMixinsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMixinsGenerator) GetMixinsReturns(result1 []string, result2 []string) {
	fake.getMixinsMutex.Lock()
	defer fake.getMixinsMutex.Unlock()
	fake.GetMixinsStub = nil
	fake.getMixinsReturns = struct {
		result1 []string
		result2 []string
	}{result1, result2}
}

func (fake *FakeMixinsGenerator) GetMixinsReturnsOnCall(i int, result1 []string, result2 []string) {
	fake.getMixinsMutex.Lock()
	defer fake.getMixinsMutex.Unlock()
	fake.GetMixinsStub = nil
	if fake.getMixinsReturnsOnCall == nil {
		fake.getMixinsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 []string
		})
	}
	fake.getMixinsReturnsOnCall[i] = struct {
		result1 []string
		result2 []string
	}{result1, result2}
}

func (fake *FakeMixinsGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMixinsMutex.RLock()
	defer fake.getMixinsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMixinsGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stack.MixinsGenerator = new(FakeMixinsGenerator)
