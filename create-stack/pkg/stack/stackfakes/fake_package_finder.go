// Code generated by counterfeiter. DO NOT EDIT.
package stackfakes

import (
	"sync"

	"github.com/paketo-buildpacks/stacks/create-stack/pkg/stack"
)

type FakePackageFinder struct {
	GetBuildPackageMetadataStub        func(string) (string, error)
	getBuildPackageMetadataMutex       sync.RWMutex
	getBuildPackageMetadataArgsForCall []struct {
		arg1 string
	}
	getBuildPackageMetadataReturns struct {
		result1 string
		result2 error
	}
	getBuildPackageMetadataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetBuildPackagesListStub        func(string) ([]string, error)
	getBuildPackagesListMutex       sync.RWMutex
	getBuildPackagesListArgsForCall []struct {
		arg1 string
	}
	getBuildPackagesListReturns struct {
		result1 []string
		result2 error
	}
	getBuildPackagesListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetRunPackageMetadataStub        func(string) (string, error)
	getRunPackageMetadataMutex       sync.RWMutex
	getRunPackageMetadataArgsForCall []struct {
		arg1 string
	}
	getRunPackageMetadataReturns struct {
		result1 string
		result2 error
	}
	getRunPackageMetadataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetRunPackagesListStub        func(string) ([]string, error)
	getRunPackagesListMutex       sync.RWMutex
	getRunPackagesListArgsForCall []struct {
		arg1 string
	}
	getRunPackagesListReturns struct {
		result1 []string
		result2 error
	}
	getRunPackagesListReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePackageFinder) GetBuildPackageMetadata(arg1 string) (string, error) {
	fake.getBuildPackageMetadataMutex.Lock()
	ret, specificReturn := fake.getBuildPackageMetadataReturnsOnCall[len(fake.getBuildPackageMetadataArgsForCall)]
	fake.getBuildPackageMetadataArgsForCall = append(fake.getBuildPackageMetadataArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBuildPackageMetadata", []interface{}{arg1})
	fake.getBuildPackageMetadataMutex.Unlock()
	if fake.GetBuildPackageMetadataStub != nil {
		return fake.GetBuildPackageMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBuildPackageMetadataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackageFinder) GetBuildPackageMetadataCallCount() int {
	fake.getBuildPackageMetadataMutex.RLock()
	defer fake.getBuildPackageMetadataMutex.RUnlock()
	return len(fake.getBuildPackageMetadataArgsForCall)
}

func (fake *FakePackageFinder) GetBuildPackageMetadataCalls(stub func(string) (string, error)) {
	fake.getBuildPackageMetadataMutex.Lock()
	defer fake.getBuildPackageMetadataMutex.Unlock()
	fake.GetBuildPackageMetadataStub = stub
}

func (fake *FakePackageFinder) GetBuildPackageMetadataArgsForCall(i int) string {
	fake.getBuildPackageMetadataMutex.RLock()
	defer fake.getBuildPackageMetadataMutex.RUnlock()
	argsForCall := fake.getBuildPackageMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePackageFinder) GetBuildPackageMetadataReturns(result1 string, result2 error) {
	fake.getBuildPackageMetadataMutex.Lock()
	defer fake.getBuildPackageMetadataMutex.Unlock()
	fake.GetBuildPackageMetadataStub = nil
	fake.getBuildPackageMetadataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetBuildPackageMetadataReturnsOnCall(i int, result1 string, result2 error) {
	fake.getBuildPackageMetadataMutex.Lock()
	defer fake.getBuildPackageMetadataMutex.Unlock()
	fake.GetBuildPackageMetadataStub = nil
	if fake.getBuildPackageMetadataReturnsOnCall == nil {
		fake.getBuildPackageMetadataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getBuildPackageMetadataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetBuildPackagesList(arg1 string) ([]string, error) {
	fake.getBuildPackagesListMutex.Lock()
	ret, specificReturn := fake.getBuildPackagesListReturnsOnCall[len(fake.getBuildPackagesListArgsForCall)]
	fake.getBuildPackagesListArgsForCall = append(fake.getBuildPackagesListArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBuildPackagesList", []interface{}{arg1})
	fake.getBuildPackagesListMutex.Unlock()
	if fake.GetBuildPackagesListStub != nil {
		return fake.GetBuildPackagesListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBuildPackagesListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackageFinder) GetBuildPackagesListCallCount() int {
	fake.getBuildPackagesListMutex.RLock()
	defer fake.getBuildPackagesListMutex.RUnlock()
	return len(fake.getBuildPackagesListArgsForCall)
}

func (fake *FakePackageFinder) GetBuildPackagesListCalls(stub func(string) ([]string, error)) {
	fake.getBuildPackagesListMutex.Lock()
	defer fake.getBuildPackagesListMutex.Unlock()
	fake.GetBuildPackagesListStub = stub
}

func (fake *FakePackageFinder) GetBuildPackagesListArgsForCall(i int) string {
	fake.getBuildPackagesListMutex.RLock()
	defer fake.getBuildPackagesListMutex.RUnlock()
	argsForCall := fake.getBuildPackagesListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePackageFinder) GetBuildPackagesListReturns(result1 []string, result2 error) {
	fake.getBuildPackagesListMutex.Lock()
	defer fake.getBuildPackagesListMutex.Unlock()
	fake.GetBuildPackagesListStub = nil
	fake.getBuildPackagesListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetBuildPackagesListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getBuildPackagesListMutex.Lock()
	defer fake.getBuildPackagesListMutex.Unlock()
	fake.GetBuildPackagesListStub = nil
	if fake.getBuildPackagesListReturnsOnCall == nil {
		fake.getBuildPackagesListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getBuildPackagesListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetRunPackageMetadata(arg1 string) (string, error) {
	fake.getRunPackageMetadataMutex.Lock()
	ret, specificReturn := fake.getRunPackageMetadataReturnsOnCall[len(fake.getRunPackageMetadataArgsForCall)]
	fake.getRunPackageMetadataArgsForCall = append(fake.getRunPackageMetadataArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRunPackageMetadata", []interface{}{arg1})
	fake.getRunPackageMetadataMutex.Unlock()
	if fake.GetRunPackageMetadataStub != nil {
		return fake.GetRunPackageMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRunPackageMetadataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackageFinder) GetRunPackageMetadataCallCount() int {
	fake.getRunPackageMetadataMutex.RLock()
	defer fake.getRunPackageMetadataMutex.RUnlock()
	return len(fake.getRunPackageMetadataArgsForCall)
}

func (fake *FakePackageFinder) GetRunPackageMetadataCalls(stub func(string) (string, error)) {
	fake.getRunPackageMetadataMutex.Lock()
	defer fake.getRunPackageMetadataMutex.Unlock()
	fake.GetRunPackageMetadataStub = stub
}

func (fake *FakePackageFinder) GetRunPackageMetadataArgsForCall(i int) string {
	fake.getRunPackageMetadataMutex.RLock()
	defer fake.getRunPackageMetadataMutex.RUnlock()
	argsForCall := fake.getRunPackageMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePackageFinder) GetRunPackageMetadataReturns(result1 string, result2 error) {
	fake.getRunPackageMetadataMutex.Lock()
	defer fake.getRunPackageMetadataMutex.Unlock()
	fake.GetRunPackageMetadataStub = nil
	fake.getRunPackageMetadataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetRunPackageMetadataReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRunPackageMetadataMutex.Lock()
	defer fake.getRunPackageMetadataMutex.Unlock()
	fake.GetRunPackageMetadataStub = nil
	if fake.getRunPackageMetadataReturnsOnCall == nil {
		fake.getRunPackageMetadataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRunPackageMetadataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetRunPackagesList(arg1 string) ([]string, error) {
	fake.getRunPackagesListMutex.Lock()
	ret, specificReturn := fake.getRunPackagesListReturnsOnCall[len(fake.getRunPackagesListArgsForCall)]
	fake.getRunPackagesListArgsForCall = append(fake.getRunPackagesListArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRunPackagesList", []interface{}{arg1})
	fake.getRunPackagesListMutex.Unlock()
	if fake.GetRunPackagesListStub != nil {
		return fake.GetRunPackagesListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRunPackagesListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePackageFinder) GetRunPackagesListCallCount() int {
	fake.getRunPackagesListMutex.RLock()
	defer fake.getRunPackagesListMutex.RUnlock()
	return len(fake.getRunPackagesListArgsForCall)
}

func (fake *FakePackageFinder) GetRunPackagesListCalls(stub func(string) ([]string, error)) {
	fake.getRunPackagesListMutex.Lock()
	defer fake.getRunPackagesListMutex.Unlock()
	fake.GetRunPackagesListStub = stub
}

func (fake *FakePackageFinder) GetRunPackagesListArgsForCall(i int) string {
	fake.getRunPackagesListMutex.RLock()
	defer fake.getRunPackagesListMutex.RUnlock()
	argsForCall := fake.getRunPackagesListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePackageFinder) GetRunPackagesListReturns(result1 []string, result2 error) {
	fake.getRunPackagesListMutex.Lock()
	defer fake.getRunPackagesListMutex.Unlock()
	fake.GetRunPackagesListStub = nil
	fake.getRunPackagesListReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) GetRunPackagesListReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getRunPackagesListMutex.Lock()
	defer fake.getRunPackagesListMutex.Unlock()
	fake.GetRunPackagesListStub = nil
	if fake.getRunPackagesListReturnsOnCall == nil {
		fake.getRunPackagesListReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getRunPackagesListReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePackageFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildPackageMetadataMutex.RLock()
	defer fake.getBuildPackageMetadataMutex.RUnlock()
	fake.getBuildPackagesListMutex.RLock()
	defer fake.getBuildPackagesListMutex.RUnlock()
	fake.getRunPackageMetadataMutex.RLock()
	defer fake.getRunPackageMetadataMutex.RUnlock()
	fake.getRunPackagesListMutex.RLock()
	defer fake.getRunPackagesListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePackageFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stack.PackageFinder = new(FakePackageFinder)
